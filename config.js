window.CONFIG={"assetRoot":"/home/kandie/Workspace/Projects/react-drill","title":"react-drill","metaDescription":"A documentation parser and generator.","motto":null,"favicon":null,"readme":{"filePath":"README.md","source":{"html":"<h1 class=\"markdown-text__heading anchorable-heading\" id=\"/readme\">\n  <span class=\"markdown-text__heading-title\">react-drill</span>\n  <a href=\"#/readme\" class=\"markdown-text__heading-anchor icon icon-link\"></a>\n</h1><p>TL;DR - &quot;Drill&quot; down through a DOM tree to the element(s) you need to reach and interact with them in an expressive, integration-style API.</p>\n<hr>\n<p>The longer version:</p>\n<p><code>react-drill</code> provides a bunch of helpers for testing React components in an integration-style manner. The beautiful part is avoiding the reliance on using ugly, meaningless, and brittle CSS classes for locating things in the DOM tree, and instead, using the actual component types to drive our tests.</p>\n<p>Let&#39;s look at a few code examples to see how this works out in action.</p>\n<h2 class=\"markdown-text__heading anchorable-heading\" id=\"/readme/example\">\n  <span class=\"markdown-text__heading-title\">Example</span>\n  <a href=\"#/readme/example\" class=\"markdown-text__heading-anchor icon icon-link\"></a>\n</h2><p>Let&#39;s assume we have a custom <code>&lt;Button /&gt;</code> component:</p>\n<pre><code class=\"lang-javascript\">// @file components/Button.js\nconst Button = React.createClass({\n  render() {\n    return &lt;button {...this.props} /&gt;\n  }\n});\n</code></pre>\n<p>And a <code>&lt;Root /&gt;</code> component which renders a bunch of <code>&lt;Button /&gt;</code> ones.</p>\n<pre><code class=\"lang-javascript\">// @file components/Root.js\nconst Root = React.createClass({\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;Button onClick={() =&gt; console.log(&#39;Quack&#39;)}&gt;\n          Quack\n        &lt;/Button&gt;\n\n        &lt;Button onClick={() =&gt; console.log(&#39;Pur&#39;)}&gt;\n          Pur\n        &lt;/Button&gt;\n      &lt;/div&gt;\n    );\n  }\n});\n</code></pre>\n<p>Now we want to test that pushing each button rendered by <code>&lt;Root /&gt;</code> yields the proper results. This is what our test would look like:</p>\n<pre><code class=\"lang-javascript\">// @file components/Root.test.js\nconst { drill, m } = require(&#39;react-drill&#39;);\nconst component = React.render(&lt;Root /&gt;, document.body);\n\ndrill(component)\n  .find(Button, m.hasText(&#39;Quack&#39;))\n    .click()\n;\n// =&gt; quack\n\ndrill(component)\n  .find(Button, m.hasText(&#39;Purrr&#39;))\n  // =&gt; AssertionError: No such Button component\n    .click()\n    // ^ this will never go through\n;\n</code></pre>\n<p>Notice how we no longer needed to rely on CSS classes, or DOM selectors, to locate elements. Instead, we utilize the <em>existing</em> component types that we write anyway.</p>\n<h2 class=\"markdown-text__heading anchorable-heading\" id=\"/readme/installation\">\n  <span class=\"markdown-text__heading-title\">Installation</span>\n  <a href=\"#/readme/installation\" class=\"markdown-text__heading-anchor icon icon-link\"></a>\n</h2><p>The thing works in any node.js environment or in the browser.</p>\n<pre><code class=\"lang-bash\">npm install react-drill\n</code></pre>\n<p>Browser build expects 3 things to be exposed on the global <code>window</code>:</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react/downloads.html\" target=\"_blank\">window.React</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/test-utils.html\" target=\"_blank\">window.React.addons.TestUtils</a></li>\n<li><a href=\"https://jquery.com/download/\" target=\"_blank\">window.jQuery</a> <em>(this dependency may be dropped in the future)</em></li>\n</ul>\n<h2 class=\"markdown-text__heading anchorable-heading\" id=\"/readme/where-to-go-from-here\">\n  <span class=\"markdown-text__heading-title\">Where to go from here</span>\n  <a href=\"#/readme/where-to-go-from-here\" class=\"markdown-text__heading-anchor icon icon-link\"></a>\n</h2><p>See <a href=\"#/js/modules/drill\">drill</a> for the drilling API. Alternatively, you can use the\nhelpers directly without drilling in <a href=\"#/js/modules/DOMSelectors\">DOMSelectors</a> and\n<a href=\"#/js/modules/DOMHelpers\">DOMHelpers</a>.</p>\n<h2 class=\"markdown-text__heading anchorable-heading\" id=\"/readme/license\">\n  <span class=\"markdown-text__heading-title\">License</span>\n  <a href=\"#/readme/license\" class=\"markdown-text__heading-anchor icon icon-link\"></a>\n</h2><p>MIT</p>\n","toc":[{"id":"/readme","scopedId":"react-drill","level":1,"html":"react-drill","text":"react-drill"},{"id":"/readme/example","scopedId":"example","level":2,"html":"Example","text":"Example"},{"id":"/readme/installation","scopedId":"installation","level":2,"html":"Installation","text":"Installation"},{"id":"/readme/where-to-go-from-here","scopedId":"where-to-go-from-here","level":2,"html":"Where to go from here","text":"Where to go from here"},{"id":"/readme/license","scopedId":"license","level":2,"html":"License","text":"License"}]}},"useHashLocation":true,"publicPath":"","stylesheet":"doc/style.less","styleOverrides":null,"gitStats":false,"footer":"<p>Made with &#9829; using <a href=\"https://github.com/tinydoc\" target=\"_blank\">tinydoc</a>.</p>\n","hotness":{"count":1,"interval":"weeks"},"disqus":false,"launchExternalLinksInNewTabs":true,"showSettingsLinkInBanner":true,"layout":"single-page","allowUserSettings":true,"tmpDir":"/home/kandie/Workspace/Projects/react-drill/.tinydoc","gitRepository":"/home/kandie/Workspace/Projects/react-drill/.git","pluginConfigs":{"cjs":[{"routeName":"js","navigationLabel":"API","source":["index.js","lib/**/*.js"],"exclude":[{}],"gitStats":false,"useDirAsNamespace":true,"inferModuleIdFromFileName":true,"analyzeNode":null,"customTags":{},"showSourcePaths":true,"sortModulesAlphabetically":false,"showNamespaceInModuleHeader":true,"database":[{"id":"drill","description":"<p>Drill into a component and start kicking. This is the main export of the\nlibrary.</p>\n","tags":[{"type":"param","string":"{React.Component} component\n        A rendered component to drill into.\n","typeInfo":{"types":["React.Component"],"name":"component","description":"<p>A rendered component to drill into.</p>\n"}},{"type":"return","string":"{Scope}\n","typeInfo":{"types":["<a href=\"#/js/modules/Scope\">Scope</a>"],"name":null,"description":null}},{"type":"example","string":"<pre><code>var drill = require(&#39;react-drill&#39;);\nvar MyComponent = require(&#39;./MyComponent&#39;);\nvar component = React.render(MyComponent, document.createElement(&#39;div&#39;));\n\ndrill(component)\n  .find(&#39;button&#39;)\n    .click()\n;\n</code></pre>","typeInfo":{"types":[],"name":null,"description":"<pre><code>var drill = require(&#39;react-drill&#39;);\nvar MyComponent = require(&#39;./MyComponent&#39;);\nvar component = React.render(MyComponent, document.createElement(&#39;div&#39;));\n\ndrill(component)\n  .find(&#39;button&#39;)\n    .click()\n;\n</code></pre>"}}],"ctx":{"type":"function","params":[{"name":"component"}]},"loc":{"start":{"line":29,"column":0},"end":{"line":31,"column":1}},"name":"drill","filePath":"index.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/index.js","isModule":true,"aliases":[],"path":"drill","summary":"Drill into a component and start kicking. This is the main export of the\n"},{"id":"DOMHelpers","description":"","tags":[{"type":"property","string":"{DOMHelpers} DOMHelpers\n\nA stand-alone version of the DOM helpers to be used without the drilling API.","typeInfo":{"types":["<a href=\"#/js/modules/DOMHelpers\">DOMHelpers</a>"],"name":"DOMHelpers","description":"<p>A stand-alone version of the DOM helpers to be used without the drilling API.</p>\n"}}],"ctx":{"type":"unknown","symbol":"@"},"receiver":"drill","loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":30}},"name":"DOMHelpers","filePath":"index.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/index.js","isModule":false,"aliases":[],"path":"drill@DOMHelpers"},{"id":"DOMSelectors","description":"","tags":[{"type":"property","string":"{DOMSelectors}\n\nA stand-alone version of the DOM selectors to be used without the drilling\nAPI.","typeInfo":{"types":["<a href=\"#/js/modules/DOMSelectors\">DOMSelectors</a>"],"name":"DOMSelectors","description":"<p>A stand-alone version of the DOM selectors to be used without the drilling\nAPI.</p>\n"}}],"ctx":{"type":"unknown","symbol":"@"},"receiver":"drill","loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":51}},"name":"DOMSelectors","filePath":"index.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/index.js","isModule":false,"aliases":[],"path":"drill@DOMSelectors"},{"id":"drill","description":"","tags":[{"type":"property","string":"{drill}\n\nA convenience shortcut to the drill function when you are using ES6\ndestructuring.\n\nFor example:\n\n    const { drill } = require('react-drill');","typeInfo":{"types":["<a href=\"#/js/modules/drill\">drill</a>"],"name":"drill","description":"<p>A convenience shortcut to the drill function when you are using ES6\ndestructuring.</p>\n<p>For example:</p>\n<pre><code>const { drill } = require(&#39;react-drill&#39;);\n</code></pre>"}}],"ctx":{"type":"unknown","symbol":"@"},"receiver":"drill","loc":{"start":{"line":58,"column":0},"end":{"line":58,"column":20}},"name":"drill","filePath":"index.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/index.js","isModule":false,"aliases":[],"path":"drill@drill"},{"id":"m","description":"","tags":[{"type":"property","string":"{Matchers}\n\nA shortcut property to access the pre-made [Matchers matcher]() functions.\n\nFor example:\n\n    const { m } = require('react-drill');\n\n    console.log(typeof m.hasText); // => \"function\"","typeInfo":{"types":["<a href=\"#/js/modules/Matchers\">Matchers</a>"],"name":"m","description":"<p>A shortcut property to access the pre-made <a href=\"#/js/modules/Matchers\">matcher</a> functions.</p>\n<p>For example:</p>\n<pre><code>const { m } = require(&#39;react-drill&#39;);\n\nconsole.log(typeof m.hasText); // =&gt; &quot;function&quot;\n</code></pre>"}}],"ctx":{"type":"unknown","symbol":"@"},"receiver":"drill","loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":36}},"name":"m","filePath":"index.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/index.js","isModule":false,"aliases":[],"path":"drill@m"},{"id":"DOMHelpers","description":"<p>Helpers for simulating events on DOM nodes and React components.</p>\n<p>When these helpers are called directly, they will operate on the\n<a href=\"#/js/modules/DOMSelectors/%40rootNode\">DOMSelectors@rootNode</a>. However, they are also available on the <a href=\"#/js/modules/Scope\">Scope</a>\nobjects you receive when drilling.</p>\n","tags":[{"type":"module","string":"DOMHelpers \nHelpers for simulating events on DOM nodes and React components.\n\nWhen these helpers are called directly, they will operate on the\n[DOMSelectors@rootNode](). However, they are also available on the [Scope]()\nobjects you receive when drilling.\n","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}},{"type":"example","string":"<p>Invoking a helper directly based on rootNode \n    const drill = require(&#39;react-drill&#39;);</p>\n<pre><code>drill.DOMSelectors.setRootNode(document.body);\ndrill.DOMHelpers.find(&#39;.something&#39;);\n\n// =&gt; document.body.querySelector(&#39;.something&#39;);\n</code></pre>","typeInfo":{"types":[],"name":"Invoking a helper directly based on rootNode","description":"<pre><code>const drill = require(&#39;react-drill&#39;);\n\ndrill.DOMSelectors.setRootNode(document.body);\ndrill.DOMHelpers.find(&#39;.something&#39;);\n\n// =&gt; document.body.querySelector(&#39;.something&#39;);\n</code></pre>"}},{"type":"example","string":"<p>Invoking through the Scope API \n    const drill = require(&#39;react-drill&#39;);</p>\n<pre><code>drill(myComponent).find(&#39;.something&#39;);\n\n// =&gt; React.findDOMNode(myComponent).querySelector(&#39;.something&#39;);\n</code></pre>","typeInfo":{"types":[],"name":"Invoking through the Scope API","description":"<pre><code>const drill = require(&#39;react-drill&#39;);\n\ndrill(myComponent).find(&#39;.something&#39;);\n\n// =&gt; React.findDOMNode(myComponent).querySelector(&#39;.something&#39;);\n</code></pre>"}}],"ctx":{"type":"object"},"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":25}},"name":"DOMHelpers","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":true,"aliases":[],"path":"DOMHelpers","summary":"Helpers for simulating events on DOM nodes and React components.\n"},{"id":"click","description":"<p>Simulate a mouse-click on any HTMLElement.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}},{"type":"param","string":"{Boolean} [simulateNative=false]","typeInfo":{"isOptional":true,"defaultValue":"false","types":["Boolean"],"name":"simulateNative","description":null}},{"type":"param","string":"{Object} options\n       See [#find]() for the options.\n","typeInfo":{"types":["Object"],"name":"options","description":"<p>See [#find] for the options.</p>\n"}},{"type":"return","string":"{Event}","typeInfo":{"types":["Event"],"name":null,"description":null}}],"ctx":{"type":"function","params":[{"name":"selector"},{"name":"simulateNative"},{"name":"options"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":47,"column":0},"end":{"line":56,"column":2}},"name":"click","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.click","summary":"Simulate a mouse-click on any HTMLElement.\n"},{"id":"change","description":"<p>Simulate a change on any HTMLElement.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}},{"type":"param","string":"{Object} attrs\n       The \"change\" event attributes.","typeInfo":{"types":["Object"],"name":"attrs","description":"<p>The &quot;change&quot; event attributes.</p>\n"}}],"ctx":{"type":"function","params":[{"name":"selector"},{"name":"attrs"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":65,"column":0},"end":{"line":69,"column":2}},"name":"change","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.change","summary":"Simulate a change on any HTMLElement.\n"},{"id":"focus","description":"<p>Simulate focus on any HTMLElement.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector\n","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}},{"type":"return","string":"{Event}","typeInfo":{"types":["Event"],"name":null,"description":null}}],"ctx":{"type":"function","params":[{"name":"selector"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":78,"column":0},"end":{"line":80,"column":2}},"name":"focus","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.focus","summary":"Simulate focus on any HTMLElement.\n"},{"id":"blur","description":"<p>Simulate blur on any HTMLElement.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector\n","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}},{"type":"return","string":"{Event}","typeInfo":{"types":["Event"],"name":null,"description":null}}],"ctx":{"type":"function","params":[{"name":"selector"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":89,"column":0},"end":{"line":91,"column":2}},"name":"blur","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.blur","summary":"Simulate blur on any HTMLElement.\n"},{"id":"fillIn","description":"<p>Fill in an &lt;input /&gt; with some text.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}},{"type":"param","string":"{String} text\n       The text to fill in the <input /> with.","typeInfo":{"types":["String"],"name":"text","description":"<p>The text to fill in the &lt;input /&gt; with.</p>\n"}}],"ctx":{"type":"function","params":[{"name":"selector"},{"name":"text"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":112,"column":0},"end":{"line":117,"column":2}},"name":"fillIn","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.fillIn","summary":"Fill in an <input /> with some text.\n"},{"id":"select","description":"<p>Select an option inside a &lt;select /&gt; tag.</p>\n<p>This helper is compatible with Chosen tags.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}},{"type":"param","string":"{String} value\n       The value of the <option /> you want to select.","typeInfo":{"types":["String"],"name":"value","description":"<p>The value of the &lt;option /&gt; you want to select.</p>\n"}}],"ctx":{"type":"function","params":[{"name":"selector"},{"name":"value"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":133,"column":0},"end":{"line":142,"column":2}},"name":"select","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.select","summary":"Select an option inside a <select /> tag.\n"},{"id":"submit","description":"<p>Submit a form elment.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}}],"ctx":{"type":"function","params":[{"name":"selector"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":149,"column":0},"end":{"line":151,"column":2}},"name":"submit","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.submit","summary":"Submit a form elment.\n"},{"id":"keyDown","description":"<p>Simulate single key-down event.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}},{"type":"param","string":"{Number} keyCode","typeInfo":{"types":["Number"],"name":"keyCode","description":null}}],"ctx":{"type":"function","params":[{"name":"selector"},{"name":"keyCode"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":159,"column":0},"end":{"line":163,"column":2}},"name":"keyDown","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.keyDown","summary":"Simulate single key-down event.\n"},{"id":"keyUp","description":"<p>Simulate single key-up event.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}},{"type":"param","string":"{Number} keyCode","typeInfo":{"types":["Number"],"name":"keyCode","description":null}}],"ctx":{"type":"function","params":[{"name":"selector"},{"name":"keyCode"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":171,"column":0},"end":{"line":175,"column":2}},"name":"keyUp","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.keyUp","summary":"Simulate single key-up event.\n"},{"id":"keyPress","description":"<p>Simulate single key-up event.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}},{"type":"param","string":"{Number} keyCode","typeInfo":{"types":["Number"],"name":"keyCode","description":null}}],"ctx":{"type":"function","params":[{"name":"selector"},{"name":"keyCode"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":183,"column":0},"end":{"line":187,"column":2}},"name":"keyPress","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.keyPress","summary":"Simulate single key-up event.\n"},{"id":"typeIn","description":"<p>Simulate key-presses to fill in an &lt;input /&gt; with some text.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector\n","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}},{"type":"param","string":"{String} text\n","typeInfo":{"types":["String"],"name":"text","description":null}},{"type":"param","string":"{Boolean} [dontReplace=false]\n       Set to true if you don't want the input's value to be cleared before\n       modifying it (e.g, append instead of replace.)","typeInfo":{"isOptional":true,"defaultValue":"false","types":["Boolean"],"name":"dontReplace","description":"<p>Set to true if you don&#39;t want the input&#39;s value to be cleared before\nmodifying it (e.g, append instead of replace.)</p>\n"}}],"ctx":{"type":"function","params":[{"name":"selector"},{"name":"text"},{"name":"dontReplace"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":200,"column":0},"end":{"line":225,"column":2}},"name":"typeIn","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.typeIn","summary":"Simulate key-presses to fill in an <input /> with some text.\n"},{"id":"mouseEnter","description":"<p>Simulate a mouseEnter on any HTMLElement.\nAssumes you are leaving the body; use mouseTransition if you need to\ncontrol both targets</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}}],"ctx":{"type":"function","params":[{"name":"selector"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":234,"column":0},"end":{"line":236,"column":2}},"name":"mouseEnter","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.mouseEnter","summary":"Simulate a mouseEnter on any HTMLElement.\n"},{"id":"mouseLeave","description":"<p>Simulate a mouseLeave on any HTMLElement.\nAssumes you are entering the body; use mouseTransition if you need to\ncontrol both targets</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}}],"ctx":{"type":"function","params":[{"name":"selector"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":245,"column":0},"end":{"line":247,"column":2}},"name":"mouseLeave","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.mouseLeave","summary":"Simulate a mouseLeave on any HTMLElement.\n"},{"id":"mouseDown","description":"<p>Simulate a mouse-down on any HTMLElement.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}}],"ctx":{"type":"function","params":[{"name":"selector"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":254,"column":0},"end":{"line":258,"column":2}},"name":"mouseDown","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.mouseDown","summary":"Simulate a mouse-down on any HTMLElement.\n"},{"id":"mouseUp","description":"<p>Simulate a mouse-up on any HTMLElement.</p>\n","tags":[{"type":"param","string":"{String|HTMLElement} selector","typeInfo":{"types":["String","HTMLElement"],"name":"selector","description":null}}],"ctx":{"type":"function","params":[{"name":"selector"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":265,"column":0},"end":{"line":269,"column":2}},"name":"mouseUp","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.mouseUp","summary":"Simulate a mouse-up on any HTMLElement.\n"},{"id":"mouseTransition","description":"<p>Simulate a mouseEnter + mouseLeave events for two nodes</p>\n<p>Both the native mouseOut and mouseOver events need to be simulated in\norder for the mouseEnter or mouseLeave to fire.\n<a href=\"https://github.com/facebook/react/issues/1297\" target=\"_blank\">https://github.com/facebook/react/issues/1297</a></p>\n","tags":[{"type":"param","string":"{String|HTMLElement} fromSelector","typeInfo":{"types":["String","HTMLElement"],"name":"fromSelector","description":null}},{"type":"param","string":"{String|HTMLElement} toSelector","typeInfo":{"types":["String","HTMLElement"],"name":"toSelector","description":null}}],"ctx":{"type":"function","params":[{"name":"fromSelector"},{"name":"toSelector"}],"symbol":"."},"receiver":"DOMHelpers","loc":{"start":{"line":281,"column":0},"end":{"line":292,"column":2}},"name":"mouseTransition","filePath":"lib/DOMHelpers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMHelpers.js","isModule":false,"aliases":[],"path":"DOMHelpers.mouseTransition","summary":"Simulate a mouseEnter + mouseLeave events for two nodes\n"},{"id":"find","description":"<p>Locate an element inside the component.</p>\n","tags":[{"type":"memberOf","string":"\n\nLocate an element inside the component.\n","explicitReceiver":"DOMSelectors","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}},{"type":"param","string":"{String} selector\n       A document.querySelector or jQuery.find() selector.\n","typeInfo":{"types":["String"],"name":"selector","description":"<p>A document.querySelector or jQuery.find() selector.</p>\n"}},{"type":"param","string":"{Object} options\n","typeInfo":{"types":["Object"],"name":"options","description":null}},{"type":"param","string":"{HTMLElement} options.container\n","typeInfo":{"types":["HTMLElement"],"name":"options.container","description":null}},{"type":"param","string":"{Boolean} options.assert\n       If true, the method will throw an error if the node is not valid or\n       could not be found in the DOM.\n","typeInfo":{"types":["Boolean"],"name":"options.assert","description":"<p>If true, the method will throw an error if the node is not valid or\ncould not be found in the DOM.</p>\n"}},{"type":"return","string":"{HTMLElement}","typeInfo":{"types":["HTMLElement"],"name":null,"description":null}}],"ctx":{"type":"function","params":[{"name":"selector"},{"name":"options"}],"symbol":"."},"receiver":"DOMSelectors","loc":{"start":{"line":35,"column":0},"end":{"line":58,"column":1}},"name":"find","filePath":"lib/DOMSelectors/find.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMSelectors/find.js","isModule":false,"aliases":[],"path":"DOMSelectors.find","summary":"Locate an element inside the component.\n"},{"id":"findAll","description":"<p>Locate an element inside the component.</p>\n","tags":[{"type":"memberOf","string":"\n\nLocate an element inside the component.\n","explicitReceiver":"DOMSelectors","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}},{"type":"param","string":"{String} selector\n       A document.querySelector or jQuery.find() selector.\n","typeInfo":{"types":["String"],"name":"selector","description":"<p>A document.querySelector or jQuery.find() selector.</p>\n"}},{"type":"param","string":"{Object} options","typeInfo":{"types":["Object"],"name":"options","description":null}},{"type":"param","string":"{HTMLElement} options.container\n       The container in which to look for the node.\n","typeInfo":{"types":["HTMLElement"],"name":"options.container","description":"<p>The container in which to look for the node.</p>\n"}},{"type":"return","string":"{HTMLElement}","typeInfo":{"types":["HTMLElement"],"name":null,"description":null}}],"ctx":{"type":"function","params":[{"name":"selector"},{"name":"options"}],"symbol":"."},"receiver":"DOMSelectors","loc":{"start":{"line":18,"column":0},"end":{"line":29,"column":1}},"name":"findAll","filePath":"lib/DOMSelectors/findAll.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMSelectors/findAll.js","isModule":false,"aliases":[],"path":"DOMSelectors.findAll","summary":"Locate an element inside the component.\n"},{"id":"findAllByType","description":"<p>Find all DOM nodes that belong to a certain React type within a component.</p>\n","tags":[{"type":"memberOf","string":"\n\nFind all DOM nodes that belong to a certain React type within a component.\n","explicitReceiver":"DOMSelectors","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}},{"type":"param","string":"{React.Component} component","typeInfo":{"types":["React.Component"],"name":"component","description":null}},{"type":"param","string":"{React.Class} type\n        The type of the component you're looking for.\n","typeInfo":{"types":["React.Class"],"name":"type","description":"<p>The type of the component you&#39;re looking for.</p>\n"}},{"type":"param","string":"{Function} cond\n        An optional [Matchers matcher]().\n","typeInfo":{"types":["Function"],"name":"cond","description":"<p>An optional <a href=\"#/js/modules/Matchers\">matcher</a>.</p>\n"}},{"type":"return","string":"{Node[]}","typeInfo":{"types":["Array&lt;Node&gt;"],"name":null,"description":null}}],"ctx":{"type":"function","params":[{"name":"component"},{"name":"type"},{"name":"cond"}],"symbol":"."},"receiver":"DOMSelectors","loc":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"name":"findAllByType","filePath":"lib/DOMSelectors/findAllByType.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMSelectors/findAllByType.js","isModule":false,"aliases":[],"path":"DOMSelectors.findAllByType","summary":"Find all DOM nodes that belong to a certain React type within a component.\n"},{"id":"findByType","description":"<p>Find a DOM node that was rendered by a certain React component type.</p>\n","tags":[{"type":"memberOf","string":"\n\nFind a DOM node that was rendered by a certain React component type.\n","explicitReceiver":"DOMSelectors","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}},{"type":"param","string":"{React.Component} subject\n        The component instance that is expected to contain the target.\n","typeInfo":{"types":["React.Component"],"name":"subject","description":"<p>The component instance that is expected to contain the target.</p>\n"}},{"type":"param","string":"{React.Class} type\n        The type of the target.\n","typeInfo":{"types":["React.Class"],"name":"type","description":"<p>The type of the target.</p>\n"}},{"type":"param","string":"{Function} [cond]\n        An optional [Matchers matcher]() function.\n","typeInfo":{"isOptional":true,"types":["Function"],"name":"cond","description":"<p>An optional <a href=\"#/js/modules/Matchers\">matcher</a> function.</p>\n"}},{"type":"return","string":"{HTMLElement}\n        The DOM node, if found.\n","typeInfo":{"types":["HTMLElement"],"name":null,"description":"<p>The DOM node, if found.</p>\n"}},{"type":"example","string":"<pre><code>const FruitBasket = require(&#39;components/FruitBasket&#39;);\nconst ComboBoxItem = require(&#39;components/ComboBoxItem&#39;);\n\ndescribe(&#39;Components::FruitBasket&#39;, function() {\n\n  it(&#39;should render a ComboBoxItem for every piece of fruit&#39;, function() {\n    const props = {\n      fruit: [ &quot;Banana&quot;, &quot;Apple&quot;, &quot;Ackee&quot; ]\n    };\n\n    const subject = React.render(&lt;FruitBasket {...props} /&gt;, document.body);\n\n    assert.ok(findByType(subject, ComboBoxItem, &#39;:contains(&quot;Banana&quot;)&#39;));\n  });\n});\n</code></pre>","typeInfo":{"types":[],"name":null,"description":"<pre><code>const FruitBasket = require(&#39;components/FruitBasket&#39;);\nconst ComboBoxItem = require(&#39;components/ComboBoxItem&#39;);\n\ndescribe(&#39;Components::FruitBasket&#39;, function() {\n\n  it(&#39;should render a ComboBoxItem for every piece of fruit&#39;, function() {\n    const props = {\n      fruit: [ &quot;Banana&quot;, &quot;Apple&quot;, &quot;Ackee&quot; ]\n    };\n\n    const subject = React.render(&lt;FruitBasket {...props} /&gt;, document.body);\n\n    assert.ok(findByType(subject, ComboBoxItem, &#39;:contains(&quot;Banana&quot;)&#39;));\n  });\n});\n</code></pre>"}}],"ctx":{"type":"function","params":[{"name":"subject"},{"name":"type"},{"name":"cond"}],"symbol":"."},"receiver":"DOMSelectors","loc":{"start":{"line":39,"column":0},"end":{"line":45,"column":1}},"name":"findByType","filePath":"lib/DOMSelectors/findByType.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMSelectors/findByType.js","isModule":false,"aliases":[],"path":"DOMSelectors.findByType","summary":"Find a DOM node that was rendered by a certain React component type.\n"},{"id":"findComponentByType","description":"<p>Low-level helper for finding a rendered component instance of a certain type,\noptionally matching some condition on its DOM node.</p>\n<p>See <a href=\"#/js/modules/DOMSelectors/.findByType\">.findByType</a> for the parameter descriptions as they&#39;re the same.</p>\n","tags":[{"type":"memberOf","string":"\n\nLow-level helper for finding a rendered component instance of a certain type,\noptionally matching some condition on its DOM node.\n\nSee [.findByType]() for the parameter descriptions as they're the same.\n","explicitReceiver":"DOMSelectors","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}},{"type":"param","string":"{React.Component} subject","typeInfo":{"types":["React.Component"],"name":"subject","description":null}},{"type":"param","string":"{React.Class} type","typeInfo":{"types":["React.Class"],"name":"type","description":null}},{"type":"param","string":"{Function} cond\n","typeInfo":{"types":["Function"],"name":"cond","description":null}},{"type":"return","string":"{React.Component}\n        The rendered instance, if found.\n","typeInfo":{"types":["React.Component"],"name":null,"description":"<p>The rendered instance, if found.</p>\n"}},{"type":"example","string":"<p>Asserting on an <code>&lt;Icon /&gt;</code> rendered by a <code>&lt;ComboBoxItem /&gt;</code> \n    const Subject = require(&#39;../SomeComponentThatRendersComboBoxItems&#39;);\n    const ComboBoxItem = require(&#39;components/ComboBoxItem&#39;);\n    const Icon = require(&#39;components/Icon&#39;);</p>\n<pre><code>it(&#39;should render a &quot;banana&quot; icon&#39;, function() {\n  const subject = React.render(Subject, document.body);\n\n  // We locate the instance we want first\n  const comboBoxItem = findComponentByType(\n    subject, ComboBoxItem, &#39;:contains(&quot;Option A&quot;)&#39;\n  );\n\n  // Then we can find things inside of it:\n  const iconInsideComboBox = findByType(comboBoxItem, Icon);\n\n  // Now, we&#39;re assured our assertions are running on the &lt;Icon /&gt; we\n  // want; no need to use :nth-of-type(), &#39;.combo-box--item .icon&#39;, or\n  // whatever.\n  assert.equal(iconInsideComboBox.className, &#39;some-icon&#39;);\n});\n</code></pre>","typeInfo":{"types":[],"name":"Asserting on an `<Icon />` rendered by a `<ComboBoxItem />`","description":"<pre><code>const Subject = require(&#39;../SomeComponentThatRendersComboBoxItems&#39;);\nconst ComboBoxItem = require(&#39;components/ComboBoxItem&#39;);\nconst Icon = require(&#39;components/Icon&#39;);\n\nit(&#39;should render a &quot;banana&quot; icon&#39;, function() {\n  const subject = React.render(Subject, document.body);\n\n  // We locate the instance we want first\n  const comboBoxItem = findComponentByType(\n    subject, ComboBoxItem, &#39;:contains(&quot;Option A&quot;)&#39;\n  );\n\n  // Then we can find things inside of it:\n  const iconInsideComboBox = findByType(comboBoxItem, Icon);\n\n  // Now, we&#39;re assured our assertions are running on the &lt;Icon /&gt; we\n  // want; no need to use :nth-of-type(), &#39;.combo-box--item .icon&#39;, or\n  // whatever.\n  assert.equal(iconInsideComboBox.className, &#39;some-icon&#39;);\n});\n</code></pre>"}}],"ctx":{"type":"function","params":[{"name":"subject"},{"name":"type"},{"name":"cond"}],"symbol":"."},"receiver":"DOMSelectors","loc":{"start":{"line":42,"column":0},"end":{"line":44,"column":1}},"name":"findComponentByType","filePath":"lib/DOMSelectors/findComponentByType.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMSelectors/findComponentByType.js","isModule":false,"aliases":[],"path":"DOMSelectors.findComponentByType","summary":"Low-level helper for finding a rendered component instance of a certain type,\n"},{"id":"findComponentsByType","description":"<p>Find all rendered components of a certain type.</p>\n","tags":[{"type":"memberOf","string":"\n\nFind all rendered components of a certain type.\n","explicitReceiver":"DOMSelectors","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}},{"type":"param","string":"{React.Component} component","typeInfo":{"types":["React.Component"],"name":"component","description":null}},{"type":"param","string":"{React.Class} type","typeInfo":{"types":["React.Class"],"name":"type","description":null}},{"type":"param","string":"{Function} [cond]\n        An optional [Matchers matcher]().\n","typeInfo":{"isOptional":true,"types":["Function"],"name":"cond","description":"<p>An optional <a href=\"#/js/modules/Matchers\">matcher</a>.</p>\n"}},{"type":"return","string":"{React.Component[]}","typeInfo":{"types":["Array&lt;React.Component&gt;"],"name":null,"description":null}}],"ctx":{"type":"function","params":[{"name":"component"},{"name":"type"},{"name":"cond"}],"symbol":"."},"receiver":"DOMSelectors","loc":{"start":{"line":32,"column":0},"end":{"line":44,"column":1}},"name":"findComponentsByType","filePath":"lib/DOMSelectors/findComponentsByType.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMSelectors/findComponentsByType.js","isModule":false,"aliases":[],"path":"DOMSelectors.findComponentsByType","summary":"Find all rendered components of a certain type.\n"},{"id":"DOMSelectors","description":"<p>Helpers for locating DOM nodes and component instances.</p>\n","tags":[{"type":"module","string":"DOMSelectors \nHelpers for locating DOM nodes and component instances.","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}}],"ctx":{"type":"unknown"},"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":37}},"name":"DOMSelectors","filePath":"lib/DOMSelectors/index.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMSelectors/index.js","isModule":true,"aliases":[],"path":"DOMSelectors","summary":"Helpers for locating DOM nodes and component instances.\n"},{"id":"rootNode","description":"","tags":[{"type":"property","string":"{HTMLElement} rootNode\n          The DOM node on which all the selectors will perform their queries.\n","typeInfo":{"types":["HTMLElement"],"name":"rootNode","description":"<p>The DOM node on which all the selectors will perform their queries.</p>\n"}},{"type":"private","string":"","visibility":"private","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}}],"ctx":{"type":"unknown","symbol":"@"},"receiver":"DOMSelectors","loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":37}},"name":"rootNode","filePath":"lib/DOMSelectors/index.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMSelectors/index.js","isModule":false,"aliases":[],"path":"DOMSelectors@rootNode"},{"id":"setRootNode","description":"","tags":[{"type":"param","string":"{HTMLElement} node\n       The DOM node of mounted instance of the component being tested. All\n       exports will be operating on this node and its children.","typeInfo":{"types":["HTMLElement"],"name":"node","description":"<p>The DOM node of mounted instance of the component being tested. All\nexports will be operating on this node and its children.</p>\n"}}],"ctx":{"type":"function","params":[{"name":"node"}],"symbol":"."},"receiver":"DOMSelectors","loc":{"start":{"line":20,"column":0},"end":{"line":22,"column":2}},"name":"setRootNode","filePath":"lib/DOMSelectors/index.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/DOMSelectors/index.js","isModule":false,"aliases":[],"path":"DOMSelectors.setRootNode"},{"id":"Matchers","description":"<p>Helper functions for locating particular DOM nodes.</p>\n","tags":[],"ctx":{"type":"object"},"loc":{"start":{"line":4,"column":0},"end":{"line":4,"column":23}},"name":"Matchers","filePath":"lib/matchers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/matchers.js","isModule":true,"aliases":[],"path":"Matchers","summary":"Helper functions for locating particular DOM nodes.\n"},{"id":"hasText","description":"<p>A matcher for the textContent of a Node.</p>\n","tags":[{"type":"param","string":"{String}  text\n        The text, or a part of it, you are expecting.\n","typeInfo":{"types":["String"],"name":"text","description":"<p>The text, or a part of it, you are expecting.</p>\n"}},{"type":"return","string":"{Function}\n","typeInfo":{"types":["Function"],"name":null,"description":null}},{"type":"example","string":"<p>Using with the drill API \n    const { m, drill } = require(&#39;react-drill&#39;);</p>\n<pre><code>drill(myComponent)\n  .find(Button, m.hasText(&#39;Remove User&#39;))\n    .click()\n;\n</code></pre>","typeInfo":{"types":[],"name":"Using with the drill API","description":"<pre><code>const { m, drill } = require(&#39;react-drill&#39;);\n\ndrill(myComponent)\n  .find(Button, m.hasText(&#39;Remove User&#39;))\n    .click()\n;\n</code></pre>"}}],"ctx":{"type":"function","params":[{"name":"text"}],"symbol":"."},"receiver":"Matchers","loc":{"start":{"line":23,"column":0},"end":{"line":27,"column":2}},"name":"hasText","filePath":"lib/matchers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/matchers.js","isModule":false,"aliases":[],"path":"Matchers.hasText","summary":"A matcher for the textContent of a Node.\n"},{"id":"hasClass","description":"<p>Create a matcher function that tests a DOM node for containing a certain\nCSS class.</p>\n","tags":[{"type":"param","string":"{String}  className\n        The CSS class you are expecting the Node to contain.\n","typeInfo":{"types":["String"],"name":"className","description":"<p>The CSS class you are expecting the Node to contain.</p>\n"}},{"type":"return","string":"{Function}\n","typeInfo":{"types":["Function"],"name":null,"description":null}},{"type":"example","string":"<p>Using with the drill API \n    const { m, drill } = require(&#39;react-drill&#39;);</p>\n<pre><code>drill(myComponent)\n  .find(Button, m.hasClass(&#39;btn--danger&#39;))\n    .click()\n;\n</code></pre>","typeInfo":{"types":[],"name":"Using with the drill API","description":"<pre><code>const { m, drill } = require(&#39;react-drill&#39;);\n\ndrill(myComponent)\n  .find(Button, m.hasClass(&#39;btn--danger&#39;))\n    .click()\n;\n</code></pre>"}}],"ctx":{"type":"function","params":[{"name":"className"}],"symbol":"."},"receiver":"Matchers","loc":{"start":{"line":47,"column":0},"end":{"line":51,"column":2}},"name":"hasClass","filePath":"lib/matchers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/matchers.js","isModule":false,"aliases":[],"path":"Matchers.hasClass","summary":"Create a matcher function that tests a DOM node for containing a certain\n"},{"id":"hasAttribute","description":"<p>Create a matcher function that tests a DOM node for either having a certain\nattribute at all, or for having that attribute with a specific value.</p>\n","tags":[{"type":"param","string":"{String} name\n        The attribute name.\n","typeInfo":{"types":["String"],"name":"name","description":"<p>The attribute name.</p>\n"}},{"type":"param","string":"{*} [value]\n        The attribute value. When blank, only the attribute existence will\n        be checked for.\n","typeInfo":{"isOptional":true,"types":["*"],"name":"value","description":"<p>The attribute value. When blank, only the attribute existence will\nbe checked for.</p>\n"}},{"type":"return","string":"{Function}\n","typeInfo":{"types":["Function"],"name":null,"description":null}},{"type":"example","string":"<p>Using with the drill API \n    const { m, drill } = require(&#39;react-drill&#39;);</p>\n<pre><code>drill(myComponent)\n  .find(Button, m.hasAttribute(&#39;disabled&#39;, false))\n    .click()\n;\n</code></pre>","typeInfo":{"types":[],"name":"Using with the drill API","description":"<pre><code>const { m, drill } = require(&#39;react-drill&#39;);\n\ndrill(myComponent)\n  .find(Button, m.hasAttribute(&#39;disabled&#39;, false))\n    .click()\n;\n</code></pre>"}}],"ctx":{"type":"function","params":[{"name":"name"},{"name":"value"}],"symbol":"."},"receiver":"Matchers","loc":{"start":{"line":75,"column":0},"end":{"line":86,"column":2}},"name":"hasAttribute","filePath":"lib/matchers.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/matchers.js","isModule":false,"aliases":[],"path":"Matchers.hasAttribute","summary":"Create a matcher function that tests a DOM node for either having a certain\n"},{"id":"component","description":"","tags":[{"type":"property","string":"{React.Component}\n\nA cursor to the React component instance this scope represents.\nComponent selectors will be operating based on this instance.","typeInfo":{"types":["React.Component"],"name":"component","description":"<p>A cursor to the React component instance this scope represents.\nComponent selectors will be operating based on this instance.</p>\n"}}],"ctx":{"type":"unknown","scope":"instance","symbol":"@"},"receiver":"Scope","loc":{"start":{"line":55,"column":2},"end":{"line":55,"column":29}},"name":"component","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope@component"},{"id":"nodes","description":"","tags":[{"type":"property","string":"{Array<Node>}\n\nThe DOM nodes this scope contains. All DOM helpers will be operating\nagainst these nodes.","typeInfo":{"types":["Array&lt;Node&gt;"],"name":"nodes","description":"<p>The DOM nodes this scope contains. All DOM helpers will be operating\nagainst these nodes.</p>\n"}}],"ctx":{"type":"unknown","scope":"instance","symbol":"@"},"receiver":"Scope","loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":57}},"name":"nodes","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope@nodes"},{"id":"path","description":"","tags":[{"type":"property","string":"{String}\n\nWe use the path for displaying helpful assertion errors.\n\nThe path could look like:\n\n    Root > Button > .icon\n    Root > .icon[] > .icon-close","typeInfo":{"types":["String"],"name":"path","description":"<p>We use the path for displaying helpful assertion errors.</p>\n<p>The path could look like:</p>\n<pre><code>Root &gt; Button &gt; .icon\nRoot &gt; .icon[] &gt; .icon-close\n</code></pre>"}}],"ctx":{"type":"unknown","scope":"instance","symbol":"@"},"receiver":"Scope","loc":{"start":{"line":75,"column":2},"end":{"line":75,"column":56}},"name":"path","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope@path"},{"id":"parentScope","description":"","tags":[{"type":"property","string":"{Scope}\n\nThe parent scope for this scope, if any. We utilize this for things like\n`#end()` where we need to traverse the scope ancestry.","typeInfo":{"types":["<a href=\"#/js/modules/Scope\">Scope</a>"],"name":"parentScope","description":"<p>The parent scope for this scope, if any. We utilize this for things like\n<code>#end()</code> where we need to traverse the scope ancestry.</p>\n"}}],"ctx":{"type":"unknown","scope":"instance","symbol":"@"},"receiver":"Scope","loc":{"start":{"line":83,"column":2},"end":{"line":83,"column":33}},"name":"parentScope","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope@parentScope"},{"id":"Scope","description":"<p>A scope representing a React component instance and a bunch of DOM nodes.</p>\n<blockquote>\n<p><strong>NOTE</strong></p>\n<p>You do not have to use this interface directly. Instead, use the primary\n<a href=\"#/js/modules/drill\">drill</a> export.</p>\n</blockquote>\n","tags":[{"type":"param","string":"{React.Component} component\n       A **rendered instance** of a React.Class type.\n","typeInfo":{"types":["React.Component"],"name":"component","description":"<p>A <strong>rendered instance</strong> of a React.Class type.</p>\n"}},{"type":"param","string":"{Array<Node>} [nodes=null]\n       The DOM nodes this scope represents.\n       Defaults to the component's root DOM node.\n","typeInfo":{"isOptional":true,"defaultValue":"null","types":["Array&lt;Node&gt;"],"name":"nodes","description":"<p>The DOM nodes this scope represents.\nDefaults to the component&#39;s root DOM node.</p>\n"}},{"type":"param","string":"{String} [path=null]\n       The path of this scope.\n       Defaults to the `displayName` of the component's type.\n","typeInfo":{"isOptional":true,"defaultValue":"null","types":["String"],"name":"path","description":"<p>The path of this scope.\nDefaults to the <code>displayName</code> of the component&#39;s type.</p>\n"}},{"type":"param","string":"{Scope} [parentScope=null]\n       The parent scope in which this scope resides.\n       Null if this is the global scope.\n\n","typeInfo":{"isOptional":true,"defaultValue":"null","types":["<a href=\"#/js/modules/Scope\">Scope</a>"],"name":"parentScope","description":"<p>The parent scope in which this scope resides.\nNull if this is the global scope.</p>\n"}},{"type":"example","string":"<pre><code>var Scope = require(&#39;react-drill/lib/Scope&#39;);\nvar myComponent = React.render(...);\nvar scope = new Scope(myComponent);\n\nscope\n  .find(&#39;button&#39;)\n  .click()\n;\n</code></pre>","typeInfo":{"types":[],"name":null,"description":"<pre><code>var Scope = require(&#39;react-drill/lib/Scope&#39;);\nvar myComponent = React.render(...);\nvar scope = new Scope(myComponent);\n\nscope\n  .find(&#39;button&#39;)\n  .click()\n;\n</code></pre>"}}],"ctx":{"type":"function","params":[{"name":"component"},{"name":"nodes"},{"name":"path"},{"name":"parentScope"}]},"loc":{"start":{"line":42,"column":0},"end":{"line":84,"column":1}},"name":"Scope","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":true,"aliases":[],"path":"Scope","summary":"A scope representing a React component instance and a bunch of DOM nodes.\n"},{"id":"node","description":"","tags":[{"type":"memberOf","string":"\n","explicitReceiver":"Scope.prototype","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}},{"type":"property","string":"{Node} node\n\nThe first node of this scope. Most of the time, we only have one node to\noperate on (like a React component's root node) and so this is a convenient\naccessor.\n","typeInfo":{"types":["Node"],"name":"node","description":"<p>The first node of this scope. Most of the time, we only have one node to\noperate on (like a React component&#39;s root node) and so this is a convenient\naccessor.</p>\n"}},{"type":"example","string":"<pre><code>assert(drill(myComponent).node.textContent === &#39;foobar&#39;);\n</code></pre>","typeInfo":{"types":[],"name":null,"description":"<pre><code>assert(drill(myComponent).node.textContent === &#39;foobar&#39;);\n</code></pre>"}},{"type":"example","string":"<pre><code>assert(drill(myComponent).find(&#39;input&#39;).node.disabled === true);\n</code></pre>","typeInfo":{"types":[],"name":null,"description":"<pre><code>assert(drill(myComponent).find(&#39;input&#39;).node.disabled === true);\n</code></pre>"}}],"ctx":{"type":"unknown","scope":"prototype","params":[],"symbol":"@"},"receiver":"Scope","loc":{"start":{"line":107,"column":2},"end":{"line":109,"column":3}},"name":"node","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope@node"},{"id":"toString","description":"","tags":[{"type":"return","string":"{String}\n        The path of this scope.\n","typeInfo":{"types":["String"],"name":null,"description":"<p>The path of this scope.</p>\n"}},{"type":"example","string":"<pre><code>String(Scope(MyComponent));\n// =&gt; MyComponent\n\nString(Scope(MyComponent).find(&#39;button&#39;));\n// =&gt; MyComponent &gt; button\n\nString(Scope(MyComponent).findAll(Button));\n// =&gt; MyComponent &gt; Button[]\n</code></pre>","typeInfo":{"types":[],"name":null,"description":"<pre><code>String(Scope(MyComponent));\n// =&gt; MyComponent\n\nString(Scope(MyComponent).find(&#39;button&#39;));\n// =&gt; MyComponent &gt; button\n\nString(Scope(MyComponent).findAll(Button));\n// =&gt; MyComponent &gt; Button[]\n</code></pre>"}}],"ctx":{"type":"function","scope":"prototype","params":[],"symbol":"#"},"receiver":"Scope","loc":{"start":{"line":127,"column":0},"end":{"line":129,"column":2}},"name":"toString","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope#toString"},{"id":"findComponentByType","description":"<p>Find a component instance in this scope.</p>\n","tags":[{"type":"param","string":"{React.Class} type\n        The type of the component you're looking for.\n","typeInfo":{"types":["React.Class"],"name":"type","description":"<p>The type of the component you&#39;re looking for.</p>\n"}},{"type":"param","string":"{Function} [cond]\n        Predicate to locate the exact component.\n","typeInfo":{"isOptional":true,"types":["Function"],"name":"cond","description":"<p>Predicate to locate the exact component.</p>\n"}},{"type":"throws","string":"{AssertionError}\n        If the instance could not be found.\n","typeInfo":{"types":["AssertionError"],"name":null,"description":"<p>If the instance could not be found.</p>\n"}},{"type":"return","string":"{Scope}\n        A new scope with the resolved instance as its root.","typeInfo":{"types":["<a href=\"#/js/modules/Scope\">Scope</a>"],"name":null,"description":"<p>A new scope with the resolved instance as its root.</p>\n"}}],"ctx":{"type":"function","scope":"prototype","params":[{"name":"type"},{"name":"cond"}],"symbol":"#"},"receiver":"Scope","loc":{"start":{"line":146,"column":0},"end":{"line":155,"column":2}},"name":"findComponentByType","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope#findComponentByType","summary":"Find a component instance in this scope.\n"},{"id":"findByType","description":"<p>Find the DOM node of a certain React component.</p>\n","tags":[{"type":"param","string":"{React.Class} type","typeInfo":{"types":["React.Class"],"name":"type","description":null}},{"type":"param","string":"{Function} cond\n","typeInfo":{"types":["Function"],"name":"cond","description":null}},{"type":"throws","string":"{AssertionError}\n        If the instance could not be found.\n","typeInfo":{"types":["AssertionError"],"name":null,"description":"<p>If the instance could not be found.</p>\n"}},{"type":"return","string":"{Scope}\n        A scope representing the current component and the DOM node of the\n        target component instance.","typeInfo":{"types":["<a href=\"#/js/modules/Scope\">Scope</a>"],"name":null,"description":"<p>A scope representing the current component and the DOM node of the\ntarget component instance.</p>\n"}}],"ctx":{"type":"function","scope":"prototype","params":[{"name":"type"},{"name":"cond"}],"symbol":"#"},"receiver":"Scope","loc":{"start":{"line":170,"column":0},"end":{"line":179,"column":2}},"name":"findByType","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope#findByType","summary":"Find the DOM node of a certain React component.\n"},{"id":"findAllByType","description":"<p>Find all DOM nodes for components of a certain type in this scope.</p>\n","tags":[{"type":"param","string":"{React.Class} type\n","typeInfo":{"types":["React.Class"],"name":"type","description":null}},{"type":"param","string":"{Function} [cond]\n        A predicate for filtering the instances.\n","typeInfo":{"isOptional":true,"types":["Function"],"name":"cond","description":"<p>A predicate for filtering the instances.</p>\n"}},{"type":"throws","string":"{AssertionError}\n        If no instances were found.\n","typeInfo":{"types":["AssertionError"],"name":null,"description":"<p>If no instances were found.</p>\n"}},{"type":"return","string":"{Scope}\n        A new scope that represents the current component and the DOM nodes\n        of the found components.","typeInfo":{"types":["<a href=\"#/js/modules/Scope\">Scope</a>"],"name":null,"description":"<p>A new scope that represents the current component and the DOM nodes\nof the found components.</p>\n"}}],"ctx":{"type":"function","scope":"prototype","params":[{"name":"type"},{"name":"cond"}],"symbol":"#"},"receiver":"Scope","loc":{"start":{"line":196,"column":0},"end":{"line":205,"column":2}},"name":"findAllByType","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope#findAllByType","summary":"Find all DOM nodes for components of a certain type in this scope.\n"},{"id":"findBySelector","description":"<p>Find one or more DOM nodes by a query selector.</p>\n","tags":[{"type":"param","string":"{String} selector\n        A query compatible with querySelectAll().\n","typeInfo":{"types":["String"],"name":"selector","description":"<p>A query compatible with querySelectAll().</p>\n"}},{"type":"param","string":"{Function} cond\n        A predicate to filter the nodes, if the selector is not enough.\n","typeInfo":{"types":["Function"],"name":"cond","description":"<p>A predicate to filter the nodes, if the selector is not enough.</p>\n"}},{"type":"param","string":"{Boolean} [expectingMany=false]\n        Used for display purposes. If you are expecting many nodes, the\n        path (which is the selector )will be suffixed by a '[]' denoting as\n        much.\n","typeInfo":{"isOptional":true,"defaultValue":"false","types":["Boolean"],"name":"expectingMany","description":"<p>Used for display purposes. If you are expecting many nodes, the\npath (which is the selector )will be suffixed by a &#39;[]&#39; denoting as\nmuch.</p>\n"}},{"type":"throws","string":"{AssertionError}\n        If no nodes were found.\n","typeInfo":{"types":["AssertionError"],"name":null,"description":"<p>If no nodes were found.</p>\n"}},{"type":"return","string":"{Scope}\n        A new scope representing the current component and the new\n        DOM nodes.","typeInfo":{"types":["<a href=\"#/js/modules/Scope\">Scope</a>"],"name":null,"description":"<p>A new scope representing the current component and the new\nDOM nodes.</p>\n"}}],"ctx":{"type":"function","scope":"prototype","params":[{"name":"selector"},{"name":"cond"},{"name":"expectingMany"}],"symbol":"#"},"receiver":"Scope","loc":{"start":{"line":228,"column":0},"end":{"line":246,"column":2}},"name":"findBySelector","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope#findBySelector","summary":"Find one or more DOM nodes by a query selector.\n"},{"id":"find","description":"<p>Find a single component or DOM node within this scope.</p>\n<p>This is a convenience accessor which delegates to either <a href=\"#/js/modules/Scope/.findByType\">.findByType</a> or\n<a href=\"#/js/modules/Scope/%23findBySelector\">#findBySelector</a> based on the selector you pass.</p>\n<blockquote>\n<p><strong>WARNING</strong></p>\n<p>In order for React types to be properly identified, we assume they have a\n<code>displayName</code> attribute, which is most likely present if you&#39;re using any\nJSX pre-processor like babeljs or such.</p>\n</blockquote>\n","tags":[{"type":"param","string":"{String|React.Class} selector\n        Either a querySelector or a React.Class;\n","typeInfo":{"types":["String","React.Class"],"name":"selector","description":"<p>Either a querySelector or a React.Class;</p>\n"}},{"type":"param","string":"{Function} [cond]\n        Predicate to locate the exact target.\n","typeInfo":{"isOptional":true,"types":["Function"],"name":"cond","description":"<p>Predicate to locate the exact target.</p>\n"}},{"type":"return","string":"{Scope}\n        A new scope representing either the new component that was located,\n        or the new DOM node.","typeInfo":{"types":["<a href=\"#/js/modules/Scope\">Scope</a>"],"name":null,"description":"<p>A new scope representing either the new component that was located,\nor the new DOM node.</p>\n"}}],"ctx":{"type":"function","scope":"prototype","params":[{"name":"selector"},{"name":"cond"}],"symbol":"#"},"receiver":"Scope","loc":{"start":{"line":270,"column":0},"end":{"line":277,"column":2}},"name":"find","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope#find","summary":"Find a single component or DOM node within this scope.\n"},{"id":"findAll","description":"<p>Find all components or DOM node within this scope.</p>\n<p>This is a convenience accessor which delegates to either <a href=\"#/js/modules/Scope/.findAllByType\">.findAllByType</a>\nor <a href=\"#/js/modules/Scope/%23findBySelector\">#findBySelector</a> based on the selector you pass.</p>\n<blockquote>\n<p><strong>WARNING</strong></p>\n<p>In order for React types to be properly identified, we assume they have a\n<code>displayName</code> attribute, which is most likely present if you&#39;re using any\nJSX pre-processor like babeljs or such.</p>\n</blockquote>\n","tags":[{"type":"param","string":"{String|React.Class} selector\n        Either a querySelector or a React.Class.\n","typeInfo":{"types":["String","React.Class"],"name":"selector","description":"<p>Either a querySelector or a React.Class.</p>\n"}},{"type":"param","string":"{Function} [cond]\n        Predicate to locate the exact target.\n","typeInfo":{"isOptional":true,"types":["Function"],"name":"cond","description":"<p>Predicate to locate the exact target.</p>\n"}},{"type":"return","string":"{Scope}\n        A new scope representing the current component and the DOM nodes\n        of the found components or nodes.","typeInfo":{"types":["<a href=\"#/js/modules/Scope\">Scope</a>"],"name":null,"description":"<p>A new scope representing the current component and the DOM nodes\nof the found components or nodes.</p>\n"}}],"ctx":{"type":"function","scope":"prototype","params":[{"name":"selector"},{"name":"cond"}],"symbol":"#"},"receiver":"Scope","loc":{"start":{"line":301,"column":0},"end":{"line":308,"column":2}},"name":"findAll","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope#findAll","summary":"Find all components or DOM node within this scope.\n"},{"id":"registerHTMLElementMethod","description":"<p>Add a new DOM node-operating method that will be available on the scope API.</p>\n","tags":[{"type":"example","string":"<pre><code>function click(node) {\n  // do something to trigger a click on this node\n  console.log(node.tagName + &#39; was clicked.&#39;);\n}\n\nScope.registerHTMLElementMethod(&#39;click&#39;, click);\n\nScope(MyComponent).find(&#39;button&#39;).click();\n// =&gt; &quot;BUTTON was clicked.&quot;\n</code></pre>","typeInfo":{"types":[],"name":null,"description":"<pre><code>function click(node) {\n  // do something to trigger a click on this node\n  console.log(node.tagName + &#39; was clicked.&#39;);\n}\n\nScope.registerHTMLElementMethod(&#39;click&#39;, click);\n\nScope(MyComponent).find(&#39;button&#39;).click();\n// =&gt; &quot;BUTTON was clicked.&quot;\n</code></pre>"}},{"type":"param","string":"{String} name\n        The name of the method that we should expose on the Scope API.\n","typeInfo":{"types":["String"],"name":"name","description":"<p>The name of the method that we should expose on the Scope API.</p>\n"}},{"type":"param","string":"{Function} method\n        The actual method implementation.","typeInfo":{"types":["Function"],"name":"method","description":"<p>The actual method implementation.</p>\n"}}],"ctx":{"type":"function","params":[{"name":"name"},{"name":"method"}],"symbol":"."},"receiver":"Scope","loc":{"start":{"line":331,"column":0},"end":{"line":341,"column":2}},"name":"registerHTMLElementMethod","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope.registerHTMLElementMethod","summary":"Add a new DOM node-operating method that will be available on the scope API.\n"},{"id":"end","description":"<p>Go back to the previous scope.</p>\n<p>This is similar to the <code>#end()</code> routine in jQuery and d3 if you&#39;re familiar\nwith them.</p>\n","tags":[{"type":"return","string":"{Scope}\n        The parent scope, or this scope if it's the root one.\n","typeInfo":{"types":["<a href=\"#/js/modules/Scope\">Scope</a>"],"name":null,"description":"<p>The parent scope, or this scope if it&#39;s the root one.</p>\n"}},{"type":"example","string":"<pre><code>Scope(MyComponent)\n  .find(Button, n =&gt; n.textContent === &#39;Remove&#39;)\n    .click()\n    .end()\n  .find(Button, n =&gt; n.textContent === &#39;Confirm Removal&#39;)\n    .click()\n;\n</code></pre>","typeInfo":{"types":[],"name":null,"description":"<pre><code>Scope(MyComponent)\n  .find(Button, n =&gt; n.textContent === &#39;Remove&#39;)\n    .click()\n    .end()\n  .find(Button, n =&gt; n.textContent === &#39;Confirm Removal&#39;)\n    .click()\n;\n</code></pre>"}}],"ctx":{"type":"function","scope":"prototype","params":[],"symbol":"#"},"receiver":"Scope","loc":{"start":{"line":362,"column":0},"end":{"line":364,"column":2}},"name":"end","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope#end","summary":"Go back to the previous scope.\n"},{"id":"has","description":"<p>Find out whether the current scope contains a certain child.</p>\n<p>Under the hood, this delegates to <a href=\"#/js/modules/Scope/.find\">.find</a> for locating the target. However,\n<a href=\"#/js/modules/Scope/.find\">.find</a> will throw by default if the target could not be located, while\nthis API will not.</p>\n","tags":[{"type":"param","string":"{Selector|React.Class} selector\n        See [#find@selector]().\n","typeInfo":{"types":["Selector","React.Class"],"name":"selector","description":"<p>See [#find@selector].</p>\n"}},{"type":"param","string":"{Function} [cond]\n        See [#find@cond]().\n","typeInfo":{"isOptional":true,"types":["Function"],"name":"cond","description":"<p>See [#find@cond].</p>\n"}},{"type":"return","string":"{Boolean}\n        Whether the child was found.","typeInfo":{"types":["Boolean"],"name":null,"description":"<p>Whether the child was found.</p>\n"}}],"ctx":{"type":"function","scope":"prototype","params":[{"name":"selector"},{"name":"cond"}],"symbol":"#"},"receiver":"Scope","loc":{"start":{"line":382,"column":0},"end":{"line":395,"column":2}},"name":"has","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope#has","summary":"Find out whether the current scope contains a certain child.\n"},{"id":"assert","description":"","tags":[{"type":"private","string":"","visibility":"private","typeInfo":{"name":null,"description":null,"isOptional":null,"defaultValue":null,"types":[]}}],"ctx":{"type":"function","scope":"prototype","params":[{"name":"cond"},{"name":"message"}],"symbol":"#"},"receiver":"Scope","loc":{"start":{"line":400,"column":0},"end":{"line":406,"column":2}},"name":"assert","filePath":"lib/Scope.js","absoluteFilePath":"/home/kandie/Workspace/Projects/react-drill/lib/Scope.js","isModule":false,"aliases":[],"path":"Scope#assert"}]}]},"pluginCount":1};